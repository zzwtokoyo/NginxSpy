using System.Collections.Generic;
using System.ComponentModel;

namespace NginxSpy.Models
{
    /// <summary>
    /// Nginx配置段类型枚举
    /// </summary>
    public enum NginxSectionType
    {
        [Description("主配置段")]
        Main,
        
        [Description("事件处理配置")]
        Events,
        
        [Description("HTTP配置段")]
        Http,
        
        [Description("服务器配置段")]
        Server,
        
        [Description("位置匹配配置")]
        Location,
        
        [Description("上游服务器配置")]
        Upstream,
        
        [Description("条件判断配置")]
        If,
        
        [Description("映射配置")]
        Map,
        
        [Description("地理位置配置")]
        Geo,
        
        [Description("限制配置")]
        Limit,
        
        [Description("类型配置")]
        Types,
        
        [Description("分割客户端配置")]
        SplitClients,
        
        [Description("流配置段")]
        Stream,
        
        [Description("邮件配置段")]
        Mail
    }

    /// <summary>
    /// Nginx配置段模板
    /// </summary>
    public class ConfigSectionTemplate
    {
        public NginxSectionType SectionType { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Template { get; set; }
        public List<NginxSectionType> AllowedParents { get; set; }
        public List<NginxSectionType> AllowedChildren { get; set; }
        public bool RequiresName { get; set; }
        public string DefaultName { get; set; }
        public List<string> CommonDirectives { get; set; }

        public ConfigSectionTemplate()
        {
            AllowedParents = new List<NginxSectionType>();
            AllowedChildren = new List<NginxSectionType>();
            CommonDirectives = new List<string>();
        }
    }

    /// <summary>
    /// Nginx配置段模板提供者
    /// </summary>
    public static class ConfigSectionTemplateProvider
    {
        private static readonly Dictionary<NginxSectionType, ConfigSectionTemplate> _templates;

        static ConfigSectionTemplateProvider()
        {
            _templates = new Dictionary<NginxSectionType, ConfigSectionTemplate>
            {
                [NginxSectionType.Main] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Main,
                    Name = "主配置",
                    Description = "Nginx主配置段，包含全局设置",
                    Template = @"# Nginx configuration file
# Generated by Nginx Spy

worker_processes  1;
events  {
    worker_connections  1024;
}
http  {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server  {
        listen       80;
        server_name  localhost;
        error_page   500 502 503 504  /50x.html;
        location / {
            root   html;
            index  index.html index.htm;
        }
        location = /50x.html {
            root   html;
        }
    }
}",
                    AllowedChildren = { NginxSectionType.Events, NginxSectionType.Http, NginxSectionType.Stream, NginxSectionType.Mail },
                    RequiresName = false,
                    CommonDirectives = { "worker_processes", "error_log", "pid", "include", "user" }
                },

                [NginxSectionType.Events] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Events,
                    Name = "事件处理",
                    Description = "配置连接处理和事件模型",
                    Template = @"events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}",
                    AllowedParents = { NginxSectionType.Main },
                    RequiresName = false,
                    CommonDirectives = { "worker_connections", "use", "multi_accept", "accept_mutex" }
                },

                [NginxSectionType.Http] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Http,
                    Name = "HTTP配置",
                    Description = "HTTP服务器配置段",
                    Template = @"http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] ""$request"" '
                    '$status $body_bytes_sent ""$http_referer"" '
                    '""$http_user_agent"" ""$http_x_forwarded_for""';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    include /etc/nginx/conf.d/*.conf;
}",
                    AllowedParents = { NginxSectionType.Main },
                    AllowedChildren = { NginxSectionType.Server, NginxSectionType.Upstream, NginxSectionType.Map, NginxSectionType.Geo, NginxSectionType.Limit, NginxSectionType.Types, NginxSectionType.SplitClients },
                    RequiresName = false,
                    CommonDirectives = { "include", "default_type", "log_format", "access_log", "sendfile", "keepalive_timeout" }
                },

                [NginxSectionType.Server] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Server,
                    Name = "服务器配置",
                    Description = "虚拟服务器配置",
                    Template = @"server {
    listen 80;
    server_name example.com www.example.com;
    root /var/www/html;
    index index.html index.htm;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}",
                    AllowedParents = { NginxSectionType.Http, NginxSectionType.Stream, NginxSectionType.Mail },
                    AllowedChildren = { NginxSectionType.Location, NginxSectionType.If },
                    RequiresName = false,
                    CommonDirectives = { "listen", "server_name", "root", "index", "error_page", "access_log", "error_log" }
                },

                [NginxSectionType.Location] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Location,
                    Name = "位置匹配",
                    Description = "URL路径匹配配置",
                    Template = @"location / {
    try_files $uri $uri/ =404;
}",
                    AllowedParents = { NginxSectionType.Server, NginxSectionType.Location },
                    AllowedChildren = { NginxSectionType.Location, NginxSectionType.If },
                    RequiresName = true,
                    DefaultName = "/",
                    CommonDirectives = { "try_files", "proxy_pass", "fastcgi_pass", "return", "rewrite", "alias", "root" }
                },

                [NginxSectionType.Upstream] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Upstream,
                    Name = "上游服务器",
                    Description = "负载均衡服务器组配置",
                    Template = @"upstream backend {
    server 127.0.0.1:8001 weight=3;
    server 127.0.0.1:8002 weight=2;
    server 127.0.0.1:8003 backup;
    
    keepalive 32;
}",
                    AllowedParents = { NginxSectionType.Http, NginxSectionType.Stream },
                    RequiresName = true,
                    DefaultName = "backend",
                    CommonDirectives = { "server", "keepalive", "ip_hash", "least_conn", "hash", "random" }
                },

                [NginxSectionType.If] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.If,
                    Name = "条件判断",
                    Description = "条件判断配置段",
                    Template = @"if ($request_method = POST) {
    return 405;
}",
                    AllowedParents = { NginxSectionType.Server, NginxSectionType.Location },
                    RequiresName = true,
                    DefaultName = "($condition)",
                    CommonDirectives = { "return", "rewrite", "set" }
                },

                [NginxSectionType.Map] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Map,
                    Name = "映射配置",
                    Description = "变量映射配置",
                    Template = @"map $http_host $backend_pool {
    default backend_default;
    ~^api\\. backend_api;
    ~^admin\\. backend_admin;
}",
                    AllowedParents = { NginxSectionType.Http, NginxSectionType.Stream },
                    RequiresName = true,
                    DefaultName = "$source $target",
                    CommonDirectives = { "default", "include", "volatile" }
                },

                [NginxSectionType.Geo] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Geo,
                    Name = "地理位置",
                    Description = "基于IP地址的地理位置配置",
                    Template = @"geo $country {
    default ZZ;
    include /etc/nginx/geo.conf;
    proxy 192.168.1.0/24;
    
    127.0.0.1 US;
    192.168.1.0/24 US;
    10.1.0.0/16 RU;
}",
                    AllowedParents = { NginxSectionType.Http, NginxSectionType.Stream },
                    RequiresName = true,
                    DefaultName = "$variable",
                    CommonDirectives = { "default", "include", "proxy", "ranges", "delete" }
                },

                [NginxSectionType.Limit] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Limit,
                    Name = "限制配置",
                    Description = "请求限制配置",
                    Template = @"limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

# 在server或location中使用:
# limit_req zone=one burst=5 nodelay;",
                    AllowedParents = { NginxSectionType.Http },
                    RequiresName = false,
                    CommonDirectives = { "limit_req_zone", "limit_conn_zone", "limit_rate", "limit_req", "limit_conn" }
                },

                [NginxSectionType.Types] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Types,
                    Name = "MIME类型",
                    Description = "MIME类型配置",
                    Template = @"types {
    text/html html htm shtml;
    text/css css;
    application/javascript js;
    application/json json;
    image/jpeg jpeg jpg;
    image/png png;
    image/gif gif;
}",
                    AllowedParents = { NginxSectionType.Http, NginxSectionType.Server, NginxSectionType.Location },
                    RequiresName = false,
                    CommonDirectives = { "text/html", "text/css", "application/javascript", "image/jpeg", "image/png" }
                },

                [NginxSectionType.SplitClients] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.SplitClients,
                    Name = "分割客户端",
                    Description = "基于客户端特征进行流量分割",
                    Template = @"split_clients $remote_addr $variant {
    0.5% .one;
    2.0% .two;
    *    "";
}",
                    AllowedParents = { NginxSectionType.Http, NginxSectionType.Stream },
                    RequiresName = true,
                    DefaultName = "$key $variable",
                    CommonDirectives = { "0.5%", "2.0%", "*" }
                },

                [NginxSectionType.Stream] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Stream,
                    Name = "流配置",
                    Description = "TCP/UDP代理和负载均衡配置",
                    Template = @"stream {
    upstream backend {
        server 192.168.1.10:3306;
        server 192.168.1.11:3306;
    }
    
    server {
        listen 3306;
        proxy_pass backend;
        proxy_timeout 1s;
        proxy_responses 1;
    }
}",
                    AllowedParents = { NginxSectionType.Main },
                    AllowedChildren = { NginxSectionType.Server, NginxSectionType.Upstream, NginxSectionType.Map, NginxSectionType.Geo, NginxSectionType.SplitClients },
                    RequiresName = false,
                    CommonDirectives = { "server", "upstream", "proxy_pass", "proxy_timeout", "proxy_responses" }
                },

                [NginxSectionType.Mail] = new ConfigSectionTemplate
                {
                    SectionType = NginxSectionType.Mail,
                    Name = "邮件代理",
                    Description = "邮件服务器代理配置",
                    Template = @"mail {
    server_name mail.example.com;
    auth_http localhost:9000/cgi-bin/auth;
    
    server {
        listen 25;
        protocol smtp;
        proxy on;
    }
    
    server {
        listen 110;
        protocol pop3;
        proxy on;
    }
}",
                    AllowedParents = { NginxSectionType.Main },
                    AllowedChildren = { NginxSectionType.Server },
                    RequiresName = false,
                    CommonDirectives = { "server_name", "auth_http", "protocol", "proxy", "listen" }
                }
            };
        }

        public static ConfigSectionTemplate GetTemplate(NginxSectionType sectionType)
        {
            return _templates.TryGetValue(sectionType, out var template) ? template : null;
        }

        public static IEnumerable<ConfigSectionTemplate> GetAllTemplates()
        {
            return _templates.Values;
        }

        public static IEnumerable<ConfigSectionTemplate> GetAvailableChildTemplates(NginxSectionType parentType)
        {
            var parentTemplate = GetTemplate(parentType);
            if (parentTemplate == null) return Enumerable.Empty<ConfigSectionTemplate>();
            
            return _templates.Values.Where(t => parentTemplate.AllowedChildren.Contains(t.SectionType));
        }

        public static bool CanAddChild(NginxSectionType parentType, NginxSectionType childType)
        {
            var parentTemplate = GetTemplate(parentType);
            return parentTemplate?.AllowedChildren.Contains(childType) == true;
        }
    }
}